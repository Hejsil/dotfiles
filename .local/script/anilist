#!/bin/sh

database='https://raw.githubusercontent.com/manami-project/anime-offline-database/master/anime-offline-database.json'
cache_dir="$HOME/.cache/anilist"
list_dir="$HOME/.local/share/anilist"
list_file="$list_dir/list"

database_file="$cache_dir/database.json"
cache_file="$cache_dir/cache.csv"

update_database() {
    local tmp1=$(mktemp)
    local tmp2=$(mktemp)
    curl -s "$database" > "$tmp1"
    jq -r '.data[] | .type, .animeSeason.year, .animeSeason.season, .episodes, .title, .sources[0]' "$database_file" |
        paste -d '\t' - - - - - - |
        awk -F '\t' '{printf "%s\t%s %s\t%s\t%s\t%s\n",$1,$2,$3,$4,$5,$6}' > "$tmp2"

    mv "$tmp1" "$database_file"
    mv "$tmp2" "$cache_file"
}

fzf2() {
    fzf -m --tiebreak begin --tabstop 4 "$@"
}

mkdir -p "$cache_dir"
mkdir -p "$list_dir"
cp "$list_file" "$list_file.backup"

[ -f "$database_file" ] || update_database
update_database &

command=$1

while true; do
    picks=$(mktemp)
    case $command in
        browse) < "$cache_file" fzf2 | cut -f4,5 > "$picks" ;;
        pick) < "$list_file" fzf2 | cut -f5,6 > "$picks" ;;
        *) exit 1 ;;    
    esac
    [ -s "$picks" ] || { rm "$picks"; break; }

    while true; do
        choice=$(printf '
c\tcompleted
d\tdropped
o\ton hold
p\tplan to watch
r\trewatch
t\ttorrent
v\tview
w\twatching
' | sed '/^$/d' | fzf | cut -f1)
        case $choice in
            v) cut -f2 "$picks" | xargs -d '\n' setsid -f "$BROWSER" 2>/dev/null >/dev/null ;;

            t) cut -f1 "$picks" |
                sed -e 's/ /+/g' -e 's#^#https://nyaa.si/?q=#' |
                xargs -d '\n' setsid -f "$BROWSER" 2>/dev/null >/dev/null
            ;;

            r|c|w|p|o|d) while read -r title id; do
                rg --word-regexp --fixed-strings "$id" "$list_file" | {
                    read -r date status episodes count _ _
                    [ -z "$date" ] && date=$(date '+%Y-%m-%d')
                    [ -z "$count" ] && count=1
                    [ -z "$episodes" ] && episodes=0
                    [ "$choice" != 'r' ] && status=$choice
                    [ "$choice" = 'r' ] && count=$((count + 1))
                    [ "$choice" = 'c' ] && {
                        total=$(rg --word-regexp --fixed-strings "$id" "$cache_file" | cut -f3)
                        [ -z "$total" ] || episodes=$total
                    }

                    # Add updated entry
                    {
                        rg --invert-match --word-regexp --fixed-strings "$id" "$list_file"
                        printf "%s\t%s\t%s\t%s\t%s\t%s\n" "$date" "$status" "$episodes" "$count" "$title" "$id"
                    } | sort | sponge "$list_file"
                }
            done < "$picks" ;;
            *) break ;;
        esac
    done

    rm "$picks";
done 

