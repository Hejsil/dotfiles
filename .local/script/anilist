#!/bin/sh

database='https://raw.githubusercontent.com/manami-project/anime-offline-database/master/anime-offline-database.json'
cache_dir="$HOME/.cache/anilist"
list_dir="$HOME/.local/share/anilist"
list_file="$list_dir/list"

database_file="$cache_dir/database.json"
cache_file="$cache_dir/cache.csv"

update_database() {
    local tmp1=$(mktemp)
    local tmp2=$(mktemp)
    curl -s "$database" > "$tmp1"
    jq -r '.data[] | .sources[0], .title, .type, .animeSeason.year, .animeSeason.season, .episodes' "$database_file" |
        paste -d '\t' - - - - - - |
        awk -F '\t' '{printf "%s\t%s\t%s\t%s %s\t%s\n",$1,$2,$3,$4,$5,$6}' > "$tmp2"


    mv "$tmp1" "$database_file"
    mv "$tmp2" "$cache_file"
}

mktmpfifo() {
    local res=$(mktemp -u)
    echo "$res"
    mkfifo -m 600 "$res"
}

list() {
    local T=$(printf '\t')
    local A=$(printf '\a')
    local filtered_sed=$(mktmpfifo)
    local full_sed=$(mktmpfifo)
    local rg_pattern=$(mktmpfifo)
    local reordered_list=$(mktmpfifo)

    cut -f1 "$list_file" > "$rg_pattern" &
    cut -f1,2 "$cache_file" | sed -e "s/^/s$A/" -e "s/$T/\\\\b$A/" -e "s/$/$A;/" > "$full_sed" &
    nawk '{printf "%s\t%s\t%s\t%s\t%s\t%s\n",$2,$3,$4,$5,$1,$1 }' "$list_file" > "$reordered_list" &
    rg --word-regexp -f "$rg_pattern" "$full_sed" > "$filtered_sed" &
    sed -f "$filtered_sed" "$reordered_list" &
    wait

    rm "$filtered_sed"
    rm "$full_sed"
    rm "$rg_pattern"
    rm "$reordered_list"
}

fzf2() {
    fzf -m -d '\t' --tiebreak begin --tabstop 4 --with-nth 1,2,3,4,5 "$@"
}

mkdir -p "$cache_dir"
mkdir -p "$list_dir"
cp "$list_file" "$list_file.backup"

[ -f "$database_file" ] || update_database
update_database &

command=$1

case $command in
    browse|pick) while true; do
        ids=$(mktemp)
        case $command in
            browse) < "$cache_file" fzf2 -n 2,3,4 | cut -f1 > "$ids" ;;
            pick) list | fzf2 | cut -f6 > "$ids" ;;
        esac
        [ -s "$ids" ] || { rm "$ids"; break; }

        while true; do
            choice=$(printf '
c\tcompleted
d\tdropped
o\ton hold
p\tplan to watch
r\trewatch
t\ttorrent
v\tview
w\twatching
' | sed '/^$/d' | fzf | cut -f1)
            case $choice in
                v) xargs -d '\n' setsid -f "$BROWSER" < "$ids" 2>/dev/null >/dev/null ;;
                t) rg --word-regexp -f "$ids" "$cache_file" | cut -f2 |
                    sd ' ' '+' | sd '^(.)' 'https://nyaa.si/?q=$1' |
                    xargs -d '\n' setsid -f "$BROWSER" 2>/dev/null >/dev/null
                ;;
                r|c|w|p|o|d) while read -r id; do
                    rg --word-regexp --fixed-strings "$id" "$list_file" | {
                        read -r _ date status episodes count
                        [ -z "$date" ] && date=$(date '+%Y-%m-%d')
                        [ -z "$count" ] && count=1
                        [ -z "$episodes" ] && episodes=0
                        [ "$choice" != 'r' ] && status=$choice
                        [ "$choice" = 'r' ] && count=$((count + 1))
                        [ "$choice" = 'c' ] && {
                            total=$(rg --word-regexp --fixed-strings "$id" "$cache_file" | cut -f5)
                            [ -z "$total" ] || episodes=$total
                        }

                        # Add updated entry
                        {
                            rg --invert-match --word-regexp --fixed-strings "$id" "$list_file"
                            printf "%s\t%s\t%s\t%s\t%s\n" "$id" "$date" "$status" "$episodes" "$count"
                        } | sort | sponge "$list_file"
                    }
                done < "$ids" ;;
                *) break ;;
            esac
        done

        rm "$ids";
    done ;;
    list) list ;;
esac

