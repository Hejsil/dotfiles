#!/bin/sh -e

file=$(mktemp)
errors=$(mktemp)

cat - >"$file"

{
    log_fns='log\.emerg|log\.alert|log\.crit|log\.err|log\.warn|log\.notice|log\.info|log\.debug'
    print_fn='\.print'
    format_fn='fmt\.format'

    fmt_fns="($log_fns|$print_fn|$format_fn)"

    # Make sure fmt apis have use a tuple for arguments. Examples:
    # * log.warn("",)           -> log.warn("", .{})
    # * log.warn("")            -> log.warn("", .{})
    echo "s#$fmt_fns"'\(([^"]*"[^"]*"\s*),?\s*\)#\1(\2, .{})#'

    # * log.warn("{} {}", a, b) -> log.warn("{} {}", .{a, b})
    echo "s#$fmt_fns"'\(([^"]*"[^"]*"\s*),\s*([^ .][^)]*)\)#\1(\2, .{\3})#'

    # * log.warn(a, b, ...) -> log.warn("{} {} ...", .{a, b, ...})
    echo "s#$fmt_fns"'\(\s*\)#\1("", .{})#'
    echo "s#$fmt_fns"'\((\s*[^"][^,)]*)\)#\1("{}", .{\2})#'
    echo "s#$fmt_fns"'\((\s*[^"][^,)]*,[^,)]*)\)#\1("{} {}", .{\2})#'
    echo "s#$fmt_fns"'\((\s*[^"][^,)]*,[^,)]*,[^,)]*)\)#\1("{} {} {}", .{\2})#'
    echo "s#$fmt_fns"'\((\s*[^"][^,)]*,[^,)]*,[^,)]*,[^,)]*)\)#\1("{} {} {} {}", .{\2})#'

    # Replace short hand for aliasing things accessed by field
    # * const std.fmt.warn -> const warn = std.fmt.warn
    echo 's#^\s*(const|var) \s*((\w+\.)+)(\w+)#\1 \4 = \2\4#'

    # Replace shorthand for importing
    echo 's#^\s*import ([^.]*)(\.[^.]*)?#const \1 = @import("\1\2")#'
} | sed 's#^#-e\n#' | xargs -d'\n' sed -E -i "$file"

zig fmt "$file" 2>"$errors" >/dev/null || true
if [ -s "$errors" ]; then
    tab=$(printf '\t')
    {
        # Look for "expected 'x', found 'y'" errors and place the expected tokens into the file
        rg -o "[^:]*:([^:]*):([^:]*): error: expected '([^']*)', found " \
            -r "\$1$tab\$2$tab\$3" <"$errors" |
            nawk '{printf "%ds#.\{%d\}#&%s#\n", $1, $2 - 1, $3 }'

    } | sed 's#^#-e\n#' | xargs -d'\n' sed -E -i "$file"

    zig fmt "$file" >/dev/null 2>/dev/null || true
fi

case $(git remote get-url origin) in
    git@github.com:Hejsil/*)
        {
            # Sort global constants only for repos I own
            grep -E -n '^((pub\s+)?(const|usingnamespace)).*;$' "$file" | cut -d: -f1 |
                ranges | sed 's/$/!sort/'
            echo 'x'
        } | ex -s "$file"
        ;;
    *) ;;
esac

cat "$file"
rm "$file"
rm "$errors"
