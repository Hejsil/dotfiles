#!/bin/sh -e

cache_home=${XDG_CACHE_HOME:-~/.cache}
data_home=${XDG_DATA_HOME-~/.local/share}
download_dir="$data_home/zig-versions"
download_tmp_dir="$download_dir/tmp"
cache_dir="$cache_home/zig-versions"
cache_tmp_dir="$cache_dir/tmp"
git_dir="$cache_home/www_ziglang_org"

versions() {
    if ! [ -d "$git_dir/.git" ]; then
        git clone "https://github.com/ziglang/www.ziglang.org.git" "$git_dir" >/dev/null
    fi

    cd "$git_dir"

    date=$(date +%Y-%m-%d)

    if ! [ -f latest_pull ] || [ "$(cat latest_pull)" != "$date" ]; then
        git pull >/dev/null
        echo "$date" >latest_pull
    fi

    case $1 in
        master) jq -r '.master.version' assets/download/index.json ;;
        *) git log -p data/releases.json |
            grep '"version":' |
            cut '-d"' -f 4 |
            sort -uV ;;
    esac
}

init() {
    name=$(basename "$(pwd)")

    git init
    git-ignore-add .zig-cache
    git-ignore-add zig-out

    mkdir -p src
    {
        echo 'pub fn main() !void {}'
        echo
        echo 'pub const std = @import("std");'
    } >src/main.zig

    {
        echo
        echo 'pub fn build(b: *std.Build) void {'
        echo '    const target = b.standardTargetOptions(.{});'
        echo '    const optimize = b.standardOptimizeOption(.{});'
        echo
        echo '    const exe = b.addExecutable(.{'
        echo "        .name = \"$name\","
        echo '        .root_source_file = b.path("src/main.zig"),'
        echo '        .target = target,'
        echo '        .optimize = optimize,'
        echo '    });'
        echo '    b.installArtifact(exe);'
        echo
        echo '    const exe_unit_tests = b.addTest(.{'
        echo '        .root_source_file = b.path("src/main.zig"),'
        echo '        .target = target,'
        echo '        .optimize = optimize,'
        echo '    });'
        echo '    const run_exe_unit_tests = b.addRunArtifact(exe_unit_tests);'
        echo
        echo '    const test_step = b.step("test", "Run unit tests");'
        echo '    test_step.dependOn(&run_exe_unit_tests.step);'
        echo '}'
        echo
        echo 'const std = @import("std");'
    } >build.zig
}

zig() {
    rm -r "$download_tmp_dir" "$cache_tmp_dir" >/dev/null 2>/dev/null || true
    mkdir -p "$download_tmp_dir" "$cache_tmp_dir"

    os=$(uname -s | tr '[:upper:]' '[:lower:]')
    arch=$(uname -m)

    master=$(versions master)
    version=${ZIG_VERSION:-$master}

    full_name="zig-$os-$arch-$version"
    tar_file="$full_name.tar.xz"
    dir_path="$cache_dir/$full_name"
    dir_tmp_path="$cache_tmp_dir/$full_name"
    tar_path="$download_dir/$tar_file"
    tar_tmp_path="$download_tmp_dir/$tar_file"

    if ! [ -f "$tar_path" ]; then
        tmp=$(mktemp "$tar_tmp_path.XXXXXXXXXX")
        curl "https://ziglang.org/builds/$tar_file" -o "$tmp"
        mv "$tmp" "$tar_path"
    fi

    if ! [ -d "$dir_path" ]; then
        tar xf "$tar_path" --directory="$cache_tmp_dir"
        mv "$dir_tmp_path" "$dir_path"

        tmp_zig_file=$(mktemp -t zig.XXXXXXXXXX.zig)
        "$dir_path/zig" fmt "$tmp_zig_file"
        rm "$tmp_zig_file"
    fi

    "$dir_path/zig" "$@"
}

first=$1
shift
case $first in
    versions) versions "$@" ;;
    init) init "$@" ;;
    *) zig "$first" "$@" ;;
esac
