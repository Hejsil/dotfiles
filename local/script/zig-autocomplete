#!/bin/nawk -f

# We are inside a comment. Don't autocomplete in here
/^.*\/\// { printf "%s¤", $0; next }

# We are inside a string. Don't autocomplete in here
/^([^"]*"(\\"|[^"])*")*[^"]*"(\\"|[^"])+$/ { printf "%s¤", $0; next }

# End of string '"'. Don't autocomplete
/^([^"]*"(\\"|[^"])*")*$/                  { printf "%s¤", $0; next }

# We are inside a char. Don't autocomplete in here
/^([^']*'(\\'|[^'])*')*[^']*'(\\'|[^'])+$/ { printf "%s¤", $0; next }

# End of string "'". Don't autocomplete
/^([^']*'(\\'|[^'])*')*$/                  { printf "%s¤", $0; next }

/\{$/  { printf "%s¤}",  $0 ; next }
/\($/  { printf "%s¤)",  $0 ; next }
/\[$/  { printf "%s¤]",  $0 ; next }
/"$/   { printf "%s¤\"", $0 ; next }
/'$/   { printf "%s¤'",  $0 ; next }

/^.*\\\\/ { printf "%s¤", $0; next }

$NF ~ /^(if|while|switch)$/ { printf "%s(¤) {}", $0 ; next }
$NF == "test"               { printf "%s\"¤\" {}", $0 ; next }
$NF == "catcherr"           { sub($NF "[ ]*$", "catch");  printf "%s |err| ¤", $0 ; next }
$NF == "switcherr"          { sub($NF "[ ]*$", "switch"); printf "%s (err) {\n    error.¤ => {},\n}", $0 ; next }
$NF == "ifexpr"             { sub($NF "[ ]*$", "if");     printf "%s (¤) 0 else 0", $0 ; next }
$NF == "ifelse"             { sub($NF "[ ]*$", "if");     printf "%s (¤) {} else {}", $0 ; next }
$NF == "ifopt"              { sub($NF "[ ]*$", "if");     printf "%s (¤) |item| {}", $0 ; next }
$NF == "iferr"              { sub($NF "[ ]*$", "if");     printf "%s (¤) |item| {} else |err| {}", $0 ; next }
$NF == "for"                { sub($NF "[ ]*$", "for");    printf "%s (¤) |item| {}", $0 ; next }
$NF == "fori"               { sub($NF "[ ]*$", "for");    printf "%s (¤) |item, i| {}", $0 ; next }
$NF == "whilei"             { sub($NF "[ ]*$", "while");  printf "var i: usize = 0;\n%s (i < ¤) : (i += 1) {}", $0 ; next }
$NF == "whileit"            { sub($NF "[ ]*$", "while");  printf "%s (¤.next()) |item| {}", $0 ; next }
$NF == "whileerr"           { sub($NF "[ ]*$", "while");  printf "%s (¤) |item| {} else |err| {}", $0 ; next }

$NF ~ /^(struct|suspend|error)$/       { printf "%s{ ¤ }", $0 ; next }
$NF ~ /^(enum|union)(\([^)]*\))?$/     { printf "%s{ ¤ }", $0 ; next }
$NF ~ /^union(\(enum(\([^)]*\))?\))?$/ { printf "%s{ ¤ }", $0 ; next }

/(^| )fn *main $/                { printf "%s() !void {\n    ¤\n}", $0 ; next }
/(^| )fn *format $/              { printf "%s( self: @This(), comptime fmt: []const u8, options: std.fmt.FormatOptions, writer: anytype,) @TypeOf(writer).Error!void {\n    _ = fmt; _ = options;\n    ¤\n}", $0 ; next }
/(^| )fn *[A-Z][a-zA-Z0-9_]* $/  { printf "%s(comptime T: type) type {\n    return ¤;\n}", $0 ; next }
/(^| )fn *[a-z_][a-zA-Z0-9_]* $/ { printf "%s( ¤ ) void {\n\n}", $0 ; next }

# fmt api autocomplete
/log\.(emerg|alert|crit|err|warn|notice|info|debug) $/ {
    printf "%s(\"¤\", .{  })", $0 ; next
}
/\.print $/     { printf "%s(\"¤\", .{  })", $0 ; next }
/fmt\.format $/ { printf "%s(¤, \"\", .{  })", $0 ; next }

/(^| )var  *gpa $/ {
    indent = $0
    sub("[^ ].*$", "", indent)
    printf "%svar gpa_state = heap.GeneralPurposeAllocator(.{}){};\n%sconst gpa = gpa_state.allocator();\n%sdefer _ = gpa_state.deinit();\n\n%s¤",
        indent, indent, indent, indent
    next
}

/(^| )var  *arena $/ {
    indent = $0
    sub("[^ ].*$", "", indent)
    printf "%svar arena_state = heap.ArenaAllocator.init(¤);\n%sconst arena = arena_state.allocator();\n%sdefer arena_state.deinit();\n\n",
        indent, indent, indent
    next
}

/(^| )var  *list $/ {
    indent = $0
    sub("[^ ].*$", "", indent)
    printf "%svar list = std.ArrayList(¤).init(allocator);\n%sdefer list.deinit();\n\n",
        indent, indent
    next
}

/^[ ]*(pub [ ]*)?(const|var) [a-zA-Z][a-zA-Z0-9_]* $/ { printf "%s= ¤;", $0 ; next }
/^[ ]*_ $/                                            { printf "%s= ¤;", $0 ; next }

$NF ~ /^allocator:$/       { printf "%s mem.Allocator¤", $0 ; next }
$NF ~ /^(str|string):$/    { printf "%s []const u8¤", $0 ; next }
$NF ~ /^(reader|writer):$/ { printf "%s anytype¤", $0 ; next }
$NF ~ /^len:$/             { printf "%s usize¤", $0 ; next }
$NF ~ /^[A-Z][a-z0-9_]*:$/ { printf "%s type¤", $0 ; next }

# `import x` -> `const x = @import("x.zig");`
NF > 1 && $(NF-1) == "import" {
    to_import = $NF;
    to_import_no_dot = $NF;
    sub(/\..*/, "", to_import_no_dot)

    $(NF-1) = "";
    $NF = "";
    sub(/^[ ]*/, "")

    printf "%sconst %s = @import(\"%s\");\n¤", $0, to_import_no_dot , to_import

    next
}

# `alias a.b.c` -> `const c = a.b.c;`
NF > 1 && $(NF-1) == "alias" {
    to_alias = $NF;
    to_alias_no_dot = $NF;
    sub(/.*\./, "", to_alias_no_dot)

    $(NF-1) = "";
    $NF = "";
    sub(/^[ ]*/, "")

    printf "%sconst %s = %s;\n¤", $0, to_alias_no_dot , to_alias

    next
}

{printf "%s¤", $0}
