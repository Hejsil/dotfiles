#!/bin/nawk -f

# We are inside a comment. Don't autocomplete in here
/^.*\/\// { printf "%s¤", $0; next }

# We are inside a string. Don't autocomplete in here
/^.*\\\\/                                  { printf "%s¤", $0; next }
/^([^"]*"(\\"|[^"])*")*[^"]*"(\\"|[^"])+$/ { printf "%s¤", $0; next }

# We are inside a char. Don't autocomplete in here
/^([^']*'(\\'|[^'])*')*[^']*'(\\'|[^'])+$/ { printf "%s¤", $0; next }

/(^|[^a-zA-Z0-9_])(if|while|switch) $/ { printf "%s(¤) {}", $0 ; next }
/(^|[^a-zA-Z0-9_])for $/               { printf "%s(¤) |item| {}", $0 ; next }
/(^|[^a-zA-Z0-9_])test $/              { printf "%s\"¤\" {}", $0 ; next }

/(^|[^a-zA-Z0-9_])(struct|suspend|error) $/       { printf "%s{¤}", $0 ; next }
/(^|[^a-zA-Z0-9_])(enum|union)(\([^)]*\))? $/     { printf "%s{¤}", $0 ; next }
/(^|[^a-zA-Z0-9_])union(\(enum(\([^)]*\))?\))? $/ { printf "%s{¤}", $0 ; next }

/(^|[^a-zA-Z0-9_])fn main $/ { printf "%s() !void {\n    ¤\n}", $0 ; next }
/(^|[^a-zA-Z0-9_])fn [A-Z][a-zA-Z0-9_]* $/  { printf "%s(comptime T: type) type {\n    return ¤;\n}", $0 ; next }
/(^|[^a-zA-Z0-9_])fn [a-z_][a-zA-Z0-9_]* $/ { printf "%s(¤) void {}", $0 ; next }

# fmt api autocomplete
/(^|[^a-zA-Z0-9_])log\.(emerg|alert|crit|err|warn|notice|info|debug) $/ {
    printf "%s(\"¤\", .{})", $0 ; next
}
/\.(print) $/                    { printf "%s(\"¤\", .{})", $0 ; next }
/(^|[^a-zA-Z0-9_])fmt\.format $/ { printf "%s(¤, \"\", .{})", $0 ; next }

/^const std $/ { printf "%s= @import(\"std\");\n¤", $0 ; next }

/(^|[^a-zA-Z0-9_])allocator: $/ { printf "%s*mem.Allocator,¤", $0 ; next }

/\{$/ { printf "%s¤}", $0 ; next }
/\($/ { printf "%s¤)", $0 ; next }
/\[$/ { printf "%s¤]", $0 ; next }

/(^|[^\\])"$/ { printf "%s¤\"", $0 ; next }
/(^|[^\\])'$/ { printf "%s¤'", $0 ; next }

{printf "%s¤", $0}
