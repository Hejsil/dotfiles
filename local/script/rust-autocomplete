#!/bin/nawk -f

# We are inside a comment. Don't autocomplete in here
/^.*\/\// { printf "%s¤", $0; next }

# We are inside a string. Don't autocomplete in here
/^([^"]*"(\\"|[^"])*")*[^"]*"(\\"|[^"])+$/ { printf "%s¤", $0; next }

# End of string '"'. Don't autocomplete
/^([^"]*"(\\"|[^"])*")* *$/                { printf "%s¤", $0; next }

# We are inside a char. Don't autocomplete in here
/^([^']*'(\\'|[^'])*')*[^']*'(\\'|[^'])+$/ { printf "%s¤", $0; next }

# End of string "'". Don't autocomplete
/^([^']*'(\\'|[^'])*')* *$/                { printf "%s¤", $0; next }

/\{$/  { printf "%s¤}",  $0 ; next }
/\($/  { printf "%s¤)",  $0 ; next }
/\[$/  { printf "%s¤]",  $0 ; next }
/"$/   { printf "%s¤\"", $0 ; next }
/'$/   { printf "%s¤'",  $0 ; next }

/::<$/ { printf "%s¤>", $0 ; next }

$NF ~ /^(if|match)$/      { printf "%s¤ {  }", $0 ; next }
NF == 1 && $NF == "for"   { printf "%s item in ¤ {  }", $0 ; next }

$NF ~ /\.lock$/     { printf "%s().unwrap()¤"     , $0 ; next }
$NF ~ /\.map_err$/  { printf "%s(|err| {¤})"      , $0 ; next }
$NF ~ /\.reduce$/   { printf "%s(|acc, item| {¤})", $0 ; next }

$NF ~ /\.all$/                { printf "%s(|item| {¤})", $0 ; next }
$NF ~ /\.and_then$/           { printf "%s(|item| {¤})", $0 ; next }
$NF ~ /\.any$/                { printf "%s(|item| {¤})", $0 ; next }
$NF ~ /\.any$/                { printf "%s(|item| {¤})", $0 ; next }
$NF ~ /\.filter$/             { printf "%s(|item| {¤})", $0 ; next }
$NF ~ /\.filter_map$/         { printf "%s(|item| {¤})", $0 ; next }
$NF ~ /\.find$/               { printf "%s(|item| {¤})", $0 ; next }
$NF ~ /\.find_map$/           { printf "%s(|item| {¤})", $0 ; next }
$NF ~ /\.flat_map$/           { printf "%s(|item| {¤})", $0 ; next }
$NF ~ /\.for_each$/           { printf "%s(|item| {¤})", $0 ; next }
$NF ~ /\.inspect$/            { printf "%s(|item| {¤})", $0 ; next }
$NF ~ /\.is_partitioned$/     { printf "%s(|item| {¤})", $0 ; next }
$NF ~ /\.is_some_with$/       { printf "%s(|item| {¤})", $0 ; next }
$NF ~ /\.is_sorted_by$/       { printf "%s(|item| {¤})", $0 ; next }
$NF ~ /\.is_sorted_by_key$/   { printf "%s(|item| {¤})", $0 ; next }
$NF ~ /\.map$/                { printf "%s(|item| {¤})", $0 ; next }
$NF ~ /\.map_while$/          { printf "%s(|item| {¤})", $0 ; next }
$NF ~ /\.max_by$/             { printf "%s(|item| {¤})", $0 ; next }
$NF ~ /\.max_by_key$/         { printf "%s(|item| {¤})", $0 ; next }
$NF ~ /\.min_by$/             { printf "%s(|item| {¤})", $0 ; next }
$NF ~ /\.min_by_key$/         { printf "%s(|item| {¤})", $0 ; next }
$NF ~ /\.partition$/          { printf "%s(|item| {¤})", $0 ; next }
$NF ~ /\.partition_in_place$/ { printf "%s(|item| {¤})", $0 ; next }
$NF ~ /\.position$/           { printf "%s(|item| {¤})", $0 ; next }
$NF ~ /\.rposition$/          { printf "%s(|item| {¤})", $0 ; next }
$NF ~ /\.skip_while$/         { printf "%s(|item| {¤})", $0 ; next }
$NF ~ /\.take_while$/         { printf "%s(|item| {¤})", $0 ; next }
$NF ~ /\.try_find$/           { printf "%s(|item| {¤})", $0 ; next }
$NF ~ /\.try_for_each$/       { printf "%s(|item| {¤})", $0 ; next }
$NF ~ /\.try_reduce$/         { printf "%s(|item| {¤})", $0 ; next }

$NF ~ /\.default_or_else$/     { printf "%s(|| {¤})", $0 ; next }
$NF ~ /\.get_or_insert_with$/  { printf "%s(|| {¤})", $0 ; next }
$NF ~ /\.ok_or_else$/          { printf "%s(|| {¤})", $0 ; next }
$NF ~ /\.or_else$/             { printf "%s(|| {¤})", $0 ; next }

$NF ~ /gst::(gst_)?debug!$/ { printf "%s(CAT, \"¤\")", $0 ; next }
$NF ~ /gst::(gst_)?error!$/ { printf "%s(CAT, \"¤\")", $0 ; next }
$NF ~ /gst::(gst_)?info!$/  { printf "%s(CAT, \"¤\")", $0 ; next }
$NF ~ /gst::(gst_)?trace!$/ { printf "%s(CAT, \"¤\")", $0 ; next }
$NF ~ /gst::(gst_)?warn!$/  { printf "%s(CAT, \"¤\")", $0 ; next }

$NF ~ /gst::ElementFactory:$/ { printf "%s:make(\"¤\", None)", $0 ; next }

{printf "%s¤", $0}

