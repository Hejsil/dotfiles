eval %sh{kak-lsp --kakoune -s "$kak_session"}
lsp-enable

set-option global tabstop 4
set-option global ui_options ncurses_assistant=off ncurses_set_title=true
set-option global modelinefmt '%val{bufname} %val{cursor_line}:%val{cursor_char_column} {{context_info}} {{mode_info}} '

add-highlighter global/ number-lines     -relative -separator ' '
add-highlighter global/ show-whitespaces -tab '▸' -tabpad ' ' -lf ' ' -spc ' '
add-highlighter global/ regex            '\h+$' 0:default,red

map global user c ':comment-line<ret>'                       -docstring 'Comment out line'
map global user y '<a-|>xclip -in -selection clipboard<ret>' -docstring 'Copy to system clipboard'
map global user p '!xclip -out -selection clipboard<ret>'    -docstring 'Paste from system clipboard'
map global user f ':fzf-fd<ret>'                             -docstring 'Fzf files'
map global user s ':fzf-rg<ret>'                             -docstring 'Fzf content of files'
map global user a ':fzf-ag<ret>'                             -docstring 'Fzf content of files'
map global user S '|sort<ret>'                               -docstring 'Sort'

map global user l ':enter-user-mode lsp<ret>' -docstring "LSP mode"

map global insert <pageup>   '<a-;><c-b>'
map global insert <pagedown> '<a-;><c-f>'

map global normal "'"     '<a-i>w*/<ret>'
map global normal 'z'     ':w<ret>'
map global normal '<ret>' 'i'

map global normal '<a-down>' ':move-lines-down<ret>'
map global normal '<a-up>'   ':move-lines-up<ret>'
map global insert '<a-down>' '<a-;>:move-lines-down<ret>'
map global insert '<a-up>'   '<a-;>:move-lines-up<ret>'

map global insert '<c-o>' '<a-;>o'

# Revert some changes kakoune did to the bindings. My muscle memory is to strong for
# me to adabt to these changes.
map global normal ',' '<space>'
map global normal '<space>' ','


# Moving lines
define-command -override move-lines-down -docstring 'move line down' %{
    execute-keys -draft 'x<a-_><a-:>Z;ezjxdzP'
}

define-command -override move-lines-up -docstring 'move line up' %{
    execute-keys -draft 'x<a-_><a-:><a-;>Z;bzkxdzp'
}

# fzf
define-command open -params 1 %{
    tmux-terminal-window sh -c %sh{
        printf '%s | sed -E -e "s/^/evaluate-commands -client %s edit / ;
            s/:([0-9]+).*/\\nexecute-keys -client %s \\1g/" | kak -p "%s"' \
            "$1" "$kak_client" "$kak_client" "$kak_session"
    }
}

define-command fzf-fd %{ open fzf-fd }
define-command fzf-ag %{ open fzf-ag }
define-command fzf-rg %{ open fzf-rg }

# Auto complete with tab
hook global InsertCompletionShow .* %{ map window insert <tab> <c-n> }
hook global InsertCompletionHide .* %{ map window insert <tab> <tab> }

declare-option -docstring "Shell command to autocomplete as you type" \
    str autocompletecmd

declare-option -docstring "Same as autocompletecmd and is run after it" \
    str autocompletecmd2

define-command autocomplete -params 1 -docstring "" %{
    evaluate-commands %sh{
        if ! command -v "$1" >/dev/null; then
            echo "fail 'No command called ''$1'' in PATH'"
        fi
        if [ "$(echo "$kak_selections_length" | grep -c ' ')" != 0 ]; then
            echo "fail 'Cannot autocomplete while having multiple selections'"
        fi
    }
    execute-keys -draft "<a-;>h<a-;>Gh<a-;>|%arg[1]<ret>"
    execute-keys -save-regs '"' '<a-;><a-f>¤<a-;>;<a-;>d'
}

hook global -group autocomplete InsertChar '[^\w\n.]' %{
    try %{ autocomplete %opt{autocompletecmd} } catch %{}
    try %{ autocomplete %opt{autocompletecmd2} } catch %{}
}


hook global BufWritePre .* %{
    try format catch %{}
    try lint catch %{}
}


hook global WinSetOption filetype=html %{ set-option window lintcmd 'htmlhint -f unix' }
hook global WinSetOption filetype=sh   %{ set-option window lintcmd 'shellcheck -f gcc' }
hook global WinSetOption filetype=zig  %{ set-option window lintcmd 'zig-check' }

hook global WinSetOption filetype=c          %{ set-option window formatcmd 'clang-format' }
hook global WinSetOption filetype=git-commit %{ set-option window formatcmd 'pandoc --columns=72 --tab-stop 2 --from markdown_github --to markdown_github' }
hook global WinSetOption filetype=html       %{ set-option window formatcmd "tidy --tidy-mark no -wrap 100 -i --indent-spaces %opt{tabstop}" }
hook global WinSetOption filetype=javascript %{ set-option window formatcmd "deno fmt --options-indent-width %opt{tabstop} -" }
hook global WinSetOption filetype=java       %{ set-option window formatcmd 'astyle --max-code-length=100 --mode=java' }
hook global WinSetOption filetype=json       %{ set-option window formatcmd "jq --indent %opt{tabstop} ." }
hook global WinSetOption filetype=lua        %{ set-option window formatcmd "stylua - --indent-width %opt{tabstop} --indent-type Spaces --column-width 100 --quote-style AutoPreferDouble --call-parentheses Always" }
hook global WinSetOption filetype=python     %{ set-option window formatcmd 'black - -l 100' }
hook global WinSetOption filetype=rust       %{ set-option window formatcmd 'rustfmt --edition 2018' }
hook global WinSetOption filetype=sh         %{ set-option window formatcmd "shfmt -i %opt{tabstop} -s -ci" }
hook global WinSetOption filetype=xml        %{ set-option window formatcmd 'xmllint --format -' }
hook global WinSetOption filetype=zig        %{ set-option window formatcmd 'zig-fmt' }

hook global WinSetOption filetype=html %{ set-option window autocompletecmd 'html-autocomplete' }
hook global WinSetOption filetype=rust %{ set-option window autocompletecmd 'rust-autocomplete' }
hook global WinSetOption filetype=zig  %{ set-option window autocompletecmd 'zig-autocomplete' }

set-option global autocompletecmd2 'generic-autocomplete'

# Colors

# For Code
face global keyword blue+b
face global attribute blue+b
face global type cyan+b
face global value cyan+b
face global string green+b
face global function yellow+b
face global operator white+b
face global variable white
face global meta cyan+b
face global module yellow+b
face global builtin yellow+b
face global comment bright-black+i
face global documentation comment
face global InlayHint bright-black+i

# For markup
face global title blue
face global header cyan
face global mono green
face global block magenta
face global link cyan
face global bullet cyan
face global list yellow

# builtin faces
face global Default default,default
face global PrimarySelection white,blue+fg
face global SecondarySelection black,blue+fg
face global PrimaryCursor black,white+fg
face global SecondaryCursor black,white+fg
face global PrimaryCursorEol black,cyan+fg
face global SecondaryCursorEol black,cyan+fg
face global LineNumbers default,default
face global LineNumberCursor default,default+r
face global MenuForeground white,bright-black
face global MenuBackground white,black
face global MenuInfo cyan
face global Information black,yellow
face global Error black,red
face global StatusLine cyan,default
face global StatusLineMode yellow,default
face global StatusLineInfo blue,default
face global StatusLineValue green,default
face global StatusCursor black,cyan
face global Prompt yellow,default
face global MatchingChar default,default+b
face global Whitespace default,default+f
face global BufferPadding blue,default


